--------------Array-------------
1.通常意义上讲指示一个单纯的线性序列，又基于native（native关键字说明其修饰的方法是一个原生态方法，方法对应的实现不是在当前文件，而是在用其他语言
  （如C和C++）实现的文件中native查看http://blog.163.com/yueyemaitian%40126/blog/static/21475796200701491621267/），因此效率最高。通常承认
  Java中效率最高的存储方式就是使用数组。
2.缺点：数组初始化后大小索引不能超出下标，缺少灵活的扩展功能，
-------------ArrayList----------
1.以List接口实现的集合，其内部运算基于Array，因此非常适合索引取值和存储现行数据。
2.缺点：不适合插入数据和删除数据，因为每插入或删除一次就会产生一次大量数组内容copy的操作。
3.ArrayList可以想象成一种会自动扩增容量的Array。
4.基于效率和类型检验，应尽可能使用Array，无法确定数组大小时才使用ArrayList。
-------------LinkedList---------
1.LinkedList是一个继承于AbstractSequentialList的双向链表。
2.比较适合插入与删除操作。
3.不适合索引取值，因为它不可以像数组一样根据索引值就可以定位元素的地址，而需要从头至尾一个一个的来数位置。
4更具体的查看http://www.cnblogs.com/lintong/p/4374292.html
------------list----------------
1.List接口提供的适合于自身的常用方法均与索引有关，这是因为List集合为列表类型，以线性方式存储对象，可以通过对象的索引操作对象。
2.List接口的常用实现类有ArrayList和LinkedList，在使用List集合时，通常情况下声明为List类型，实例化时根据实际情况的需要，实例化为ArrayList或LinkedList，例如：
  List<String> l = new ArrayList<String>();// 利用ArrayList类实例化List集合
  List<String> l2 = new LinkedList<String>();// 利用LinkedList类实例化List集合
--------------------------------------
|--List:元素是有序的(怎么存的就怎么取出来，顺序不会乱)，元素可以重复（角标1上有个3，角标2上也可以有个3）因为该集合体系有索引，
|-- ArrayList：底层的数据结构使用的是数组结构（数组长度是可变的百分之五十延长）（特点是查询很快，但增删较慢）线程不同步
|-- LinkedList：底层的数据结构是链表结构（特点是查询较慢，增删较快）
|-- Vector：底层是数组数据结构 线程同步（数组长度是可变的百分之百延长）（无论查询还是增删都很慢，被ArrayList替代了）
---------------------------------
---------------------------------
leetcode：118
